{
    "blocks": "[{\"id\":\"a072a58e-fb1a-45ae-bf07-842e608bbbb6\",\"type\":\"doc\",\"object\":{\"label\":\"Goal\",\"body\":\"Stream a CSV from an array of string array with Symfony.\"},\"label\":\"Goal\"},{\"id\":\"7643d953-016f-4f57-8250-3262fef1dc41\",\"type\":\"doc\",\"object\":{\"label\":\"Solution\",\"body\":\"```php\\r\\n    /**\\r\\n     * @param $string[][] $table\\r\\n     */\\r\\n    public function csvResponse(array $table, string $filename = 'csv_export', string $disposition = 'attachment'): StreamedResponse\\r\\n    {\\r\\n\\r\\n        $response = new StreamedResponse(\\r\\n            function () use ($table) {\\r\\n                $handle = \\\\fopen('php://output', 'r+');\\r\\n                if (false === $handle) {\\r\\n                    throw new \\\\RuntimeException('Unexpected error while opening php://output');\\r\\n                }\\r\\n\\r\\n                foreach ($table as $row) {\\r\\n                    \\\\fputcsv($handle, $row);\\r\\n                }\\r\\n            }\\r\\n        );\\r\\n\\r\\n        $response->headers->set('Content-Type', 'text/csv; charset=utf-8');\\r\\n        $response->headers->set('Content-Disposition', \\\\sprintf('%s;filename=\\\"%s.csv\\\"', $disposition, $filename));\\r\\n        $response->headers->set('Cache-Control', 'max-age=0');\\r\\n        \\r\\n        return $response;\\r\\n    }\\r\\n```\"},\"label\":\"Solution\"},{\"id\":\"eee00d45-3bc1-4257-bdad-209aa3fbe857\",\"object\":{\"label\":\"Explanation\",\"body\":\"Stream a response avoid to:\\r\\n - delay the response once the CSV is generated\\r\\n - load in memory the data in CSV format or generate a tempory file with the response\\r\\n\\r\\nIn this example I'm using the Symfony `Symfony\\\\Component\\\\HttpFoundation\\\\StreamedResponse` class. It works with a callback function.\\r\\nEvery things streamed to the standard output inside that callback will be pushed to the stream response.\\r\\n\\r\\nAt line 10 I open the [file `php://output`](https://www.php.net/manual/en/wrappers.php.php#wrappers.php.output), \\r\\nit's a write-only stream that allows you to write to the standard output buffer. It's how I push in the output\\r\\nstream. Indeed, to convert an array of string into a CSV line I use the [fputcsv function](https://www.php.net/manual/en/function.fputcsv).\\r\\nAs that function requires a file pointer I can't just stream directly to the standard output.\\r\\n\\r\\nYou see that I set those 3 headers:\\r\\n-  `Content-Type` without the browser won'tunderstand that is a text file\\r\\n-  `Content-Disposition` specify the filename and if the file must be downladed (`attachment`) or can be shown in the browser (`inline`)\\r\\n-  `Cache-Control` specify if te response can be cahced or not\"},\"label\":\"Explanation\",\"type\":\"doc\"}]",
    "description": "Stream a CSV with Symfony StreamResponse",
    "label": "2021-06-12 Stream a CSV from a JSON array",
    "locale": "en",
    "path": "2021-06-12/stream-a-csv-from-a-json-array",
    "published_date": "2021-06-12T09:55:07+02:00",
    "search": [
        "Goal",
        "Stream a CSV from an array of string array with Symfony.",
        "Solution",
        "```php\r\n    /**\r\n     * @param $string[][] $table\r\n     */\r\n    public function csvResponse(array $table, string $filename = 'csv_export', string $disposition = 'attachment'): StreamedResponse\r\n    {\r\n\r\n        $response = new StreamedResponse(\r\n            function () use ($table) {\r\n                $handle = \\fopen('php://output', 'r+');\r\n                if (false === $handle) {\r\n                    throw new \\RuntimeException('Unexpected error while opening php://output');\r\n                }\r\n\r\n                foreach ($table as $row) {\r\n                    \\fputcsv($handle, $row);\r\n                }\r\n            }\r\n        );\r\n\r\n        $response->headers->set('Content-Type', 'text/csv; charset=utf-8');\r\n        $response->headers->set('Content-Disposition', \\sprintf('%s;filename=\"%s.csv\"', $disposition, $filename));\r\n        $response->headers->set('Cache-Control', 'max-age=0');\r\n        \r\n        return $response;\r\n    }\r\n```",
        "Explanation",
        "Stream a response avoid to:\r\n - delay the response once the CSV is generated\r\n - load in memory the data in CSV format or generate a tempory file with the response\r\n\r\nIn this example I'm using the Symfony `Symfony\\Component\\HttpFoundation\\StreamedResponse` class. It works with a callback function.\r\nEvery things streamed to the standard output inside that callback will be pushed to the stream response.\r\n\r\nAt line 10 I open the [file `php://output`](https://www.php.net/manual/en/wrappers.php.php#wrappers.php.output), \r\nit's a write-only stream that allows you to write to the standard output buffer. It's how I push in the output\r\nstream. Indeed, to convert an array of string into a CSV line I use the [fputcsv function](https://www.php.net/manual/en/function.fputcsv).\r\nAs that function requires a file pointer I can't just stream directly to the standard output.\r\n\r\nYou see that I set those 3 headers:\r\n-  `Content-Type` without the browser won'tunderstand that is a text file\r\n-  `Content-Disposition` specify the filename and if the file must be downladed (`attachment`) or can be shown in the browser (`inline`)\r\n-  `Cache-Control` specify if te response can be cahced or not"
    ],
    "template": "blog",
    "title": "Stream a CSV from a JSON array"
}