{
    "blocks": "[{\"id\":\"0e46def7-de78-4712-bc20-f3a02682f747\",\"object\":{\"label\":\"Goal\",\"body\":\"<p>AWS glacier offers a low cost solution for archiving files. Here is how I implementing it to backup my server&#39;s files.</p>\"},\"label\":\"Goal\",\"type\":\"paragraph\"},{\"id\":\"0180273a-7f7f-4bb2-9603-c691be8bb02b\",\"object\":{\"label\":\"Approach with Docker, first try\",\"body\":\"I try to have a server at home where every services are dockerized. The only tools that I still use on the host are:\\r\\n\\r\\n - midnight commander : not that I really need it but it reminds me of my dad\\r\\n - ssh : to have a remote access to the host\\r\\n - crontab : in order to schedule `docker run` commands\\r\\n   \\r\\nSo it's important for me to have a dockerized solution. Hopefully the AWS client is integrated into the elasticms docker image.\\r\\n\\r\\nHere is my first try:\\r\\n\\r\\n```\\r\\ndocker run --rm -it -v /home/theus/docker/aws:/home/default/.aws:ro -v /mnt/backups/theus:/data  elasticms/admin aws s3 sync --storage-class GLACIER /data s3://septune\\r\\n```\\r\\n\\r\\n\\r\\nThe initital upload cost me, for about 240GB, 51$ and the monthly cost for that volume of data is about 0.50$/month which is nice.\"},\"label\":\"Approach with Docker, first try\",\"type\":\"doc\"},{\"id\":\"6fd472ed-1724-4d7c-b334-81d8b4e58213\",\"type\":\"doc\",\"object\":{\"label\":\"Optimization\",\"body\":\"Obviouly in my case, it's useless\\r\\n - to keep deleted files\\r\\n - to activate the interactif mode\\r\\n\\r\\n```\\r\\ndocker run --rm -v /home/theus/docker/aws:/home/default/.aws:ro -v /mnt/backups/theus:/data  elasticms/admin aws s3 sync --delete --storage-class GLACIER /data s3://septune\\r\\n```\"},\"label\":\"Optimization\"},{\"id\":\"13f3c00b-74ef-4d6e-af9a-68904decceb7\",\"type\":\"doc\",\"object\":{\"label\":\"Schedule it\",\"body\":\"Here is my crontab command (`crontab -e`):\\r\\n\\r\\n```\\r\\n0 6 * * * docker run --rm -v /home/theus/docker/aws:/home/default/.aws:ro -v /mnt/backups/theus:/data  elasticms/admin aws s3 sync --delete --storage-class GLACIER /data s3://septune 2>>~/cron_error.log\\r\\n\\r\\n```\"},\"label\":\"Schedule it\"},{\"id\":\"cd827bf4-1a41-4386-ad57-5fdb7baaef98\",\"type\":\"doc\",\"object\":{\"label\":\"Tips\",\"body\":\"If it's easy to save my docker context I also have to backup the rest of my configuration\"},\"label\":\"Tips\",\"children\":[{\"id\":\"4675cdc6-9f02-44ce-879a-99c40b062000\",\"type\":\"doc\",\"object\":{\"label\":\"Backup my router config\",\"body\":\"In your router it's possible to backup the config. You should have somewhere a download config link. \\r\\n\\r\\nBut, and I'm probably not the only one, I usually forgot to backup my config when I'm updating it. \\r\\nSo when I need it the last version that I have is obsolete.\\r\\n\\r\\nIf you open your browser's debug toolbar (at least for Chrome), just before clicking on the backup config link, you'll be able to save\\r\\nthe request in a curl format: Right click > copy > copy as cURL.\\r\\n\\r\\nYou chould have something like in your clipboard\\r\\n\\r\\n```\\r\\n\\r\\ncurl 'http://192.168.0.1/nvrambak.bin' \\\\\\r\\n  -H 'Connection: keep-alive' \\\\\\r\\n  -H 'Pragma: no-cache' \\\\\\r\\n  -H 'Cache-Control: no-cache' \\\\\\r\\n  -H 'Authorization: Basic dZZZZZZZZZZ3bDEzNzc=' \\\\\\r\\n  --compressed \\\\\\r\\n  --insecure \\\\\\r\\n  --output /mnt/backups/theus/dumps/save.bin\\r\\n````\\r\\n\\r\\nBased on that you can develop this little bash script:\\r\\n\\r\\n```\\r\\n#/bin/bash\\r\\ncurl 'http://192.168.0.1/nvrambak.bin' \\\\\\r\\n  -H 'Connection: keep-alive' \\\\\\r\\n  -H 'Pragma: no-cache' \\\\\\r\\n  -H 'Cache-Control: no-cache' \\\\\\r\\n  -H 'Authorization: Basic dGhldXM6ZmV3bDEzNzc=' \\\\\\r\\n  --compressed \\\\\\r\\n  --insecure \\\\\\r\\n  --output /mnt/backups/theus/dumps/router_ddwrt_$(date +%u).bin\\r\\n```\\r\\n\\r\\nUp to you to schedule it periodically. An example with crontab:\\r\\n\\r\\n```\\r\\n18 * * * * ~/.local/bin/router_backup.sh 2>>~/router_backup_error.log\\r\\n\\r\\n```\"},\"label\":\"Backup my router config\"},{\"id\":\"122d9c93-4488-49be-aa05-a3e10c10e37b\",\"type\":\"doc\",\"object\":{\"label\":\"Backup my crontab config\",\"body\":\"In case of a disaster I won't have to reinvent my crontab config:\\r\\n\\r\\n```\\r\\ncrontab -l > /mnt/backups/theus/crontab.bak\\r\\n```\\r\\n\\r\\nThe same in my crontab config :\\r\\n\\r\\n```\\r\\n0 5 * * * crontab -l > /mnt/backups/theus/crontab.bak 2>>~/cron_error.log\\r\\n```\"},\"label\":\"Backup my crontab config\"}]}]",
    "description": "AWS glacier is a low cost solution for archiving and for backup",
    "label": "2021-06-08 Backup on AWS glacier",
    "locale": "en",
    "path": "blog/2021-06-08/backup-on-aws-glacier",
    "published_date": "2021-06-08T09:40:46+02:00",
    "search": [
        "Goal",
        "AWS glacier offers a low cost solution for archiving files. Here is how I implementing it to backup my server&#39;s files.",
        "Approach with Docker, first try",
        "I try to have a server at home where every services are dockerized. The only tools that I still use on the host are:\r\n\r\n - midnight commander : not that I really need it but it reminds me of my dad\r\n - ssh : to have a remote access to the host\r\n - crontab : in order to schedule `docker run` commands\r\n   \r\nSo it's important for me to have a dockerized solution. Hopefully the AWS client is integrated into the elasticms docker image.\r\n\r\nHere is my first try:\r\n\r\n```\r\ndocker run --rm -it -v /home/theus/docker/aws:/home/default/.aws:ro -v /mnt/backups/theus:/data  elasticms/admin aws s3 sync --storage-class GLACIER /data s3://septune\r\n```\r\n\r\n\r\nThe initital upload cost me, for about 240GB, 51$ and the monthly cost for that volume of data is about 0.50$/month which is nice.",
        "Optimization",
        "Obviouly in my case, it's useless\r\n - to keep deleted files\r\n - to activate the interactif mode\r\n\r\n```\r\ndocker run --rm -v /home/theus/docker/aws:/home/default/.aws:ro -v /mnt/backups/theus:/data  elasticms/admin aws s3 sync --delete --storage-class GLACIER /data s3://septune\r\n```",
        "Schedule it",
        "Here is my crontab command (`crontab -e`):\r\n\r\n```\r\n0 6 * * * docker run --rm -v /home/theus/docker/aws:/home/default/.aws:ro -v /mnt/backups/theus:/data  elasticms/admin aws s3 sync --delete --storage-class GLACIER /data s3://septune 2>>~/cron_error.log\r\n\r\n```",
        "Tips",
        "If it's easy to save my docker context I also have to backup the rest of my configuration",
        "Backup my router config",
        "In your router it's possible to backup the config. You should have somewhere a download config link. \r\n\r\nBut, and I'm probably not the only one, I usually forgot to backup my config when I'm updating it. \r\nSo when I need it the last version that I have is obsolete.\r\n\r\nIf you open your browser's debug toolbar (at least for Chrome), just before clicking on the backup config link, you'll be able to save\r\nthe request in a curl format: Right click > copy > copy as cURL.\r\n\r\nYou chould have something like in your clipboard\r\n\r\n```\r\n\r\ncurl 'http://192.168.0.1/nvrambak.bin' \\\r\n  -H 'Connection: keep-alive' \\\r\n  -H 'Pragma: no-cache' \\\r\n  -H 'Cache-Control: no-cache' \\\r\n  -H 'Authorization: Basic dZZZZZZZZZZ3bDEzNzc=' \\\r\n  --compressed \\\r\n  --insecure \\\r\n  --output /mnt/backups/theus/dumps/save.bin\r\n````\r\n\r\nBased on that you can develop this little bash script:\r\n\r\n```\r\n#/bin/bash\r\ncurl 'http://192.168.0.1/nvrambak.bin' \\\r\n  -H 'Connection: keep-alive' \\\r\n  -H 'Pragma: no-cache' \\\r\n  -H 'Cache-Control: no-cache' \\\r\n  -H 'Authorization: Basic dGhldXM6ZmV3bDEzNzc=' \\\r\n  --compressed \\\r\n  --insecure \\\r\n  --output /mnt/backups/theus/dumps/router_ddwrt_$(date +%u).bin\r\n```\r\n\r\nUp to you to schedule it periodically. An example with crontab:\r\n\r\n```\r\n18 * * * * ~/.local/bin/router_backup.sh 2>>~/router_backup_error.log\r\n\r\n```",
        "Backup my crontab config",
        "In case of a disaster I won't have to reinvent my crontab config:\r\n\r\n```\r\ncrontab -l > /mnt/backups/theus/crontab.bak\r\n```\r\n\r\nThe same in my crontab config :\r\n\r\n```\r\n0 5 * * * crontab -l > /mnt/backups/theus/crontab.bak 2>>~/cron_error.log\r\n```"
    ],
    "template": "blog",
    "title": "Backup on AWS glacier"
}