{
    "blocks": "[{\"id\":\"c4e17d7e-208f-4e5a-915b-abdd12b44681\",\"object\":{\"label\":\"Get an image average color\",\"body\":\"The goal is to determine what's the average (dominant) color of an binary image (JPEG, PNG, GIF, WBMP, and GD2).\\r\\n\\r\\nI started from [this GitHub solution](https://stackoverflow.com/questions/3468500/detect-overall-average-color-of-the-picture#answer-38144826). Just that:\\r\\n - I used the elasticms common image resizing to reuse the cache mecanism (and not resize images each time)\\r\\n - I added RuntimeException exceptions\\r\\n - I backslash (\\\\\\\\) prefixed root class domain functions \\r\\n\\r\\n```injectablephp\\r\\npublic function assetAverageColor(string $hash): string\\r\\n{\\r\\n    try {\\r\\n        $config = $this->processor->configFactory($hash, [\\r\\n            EmsFields::ASSET_CONFIG_TYPE => EmsFields::ASSET_CONFIG_TYPE_IMAGE,\\r\\n            EmsFields::ASSET_CONFIG_RESIZE => 'free',\\r\\n            EmsFields::ASSET_CONFIG_WIDTH => 1,\\r\\n            EmsFields::ASSET_CONFIG_HEIGHT => 1,\\r\\n            EmsFields::ASSET_CONFIG_QUALITY => 80,\\r\\n            EmsFields::ASSET_CONFIG_MIME_TYPE => 'image/jpeg',\\r\\n        ]);\\r\\n        $stream = $this->processor->getStream($config, 'one-pixel.jpg');\\r\\n\\r\\n        $image = \\\\imagecreatefromstring($stream->getContents());\\r\\n        if (false === $image) {\\r\\n            throw new \\\\RuntimeException('Unexpected imagecreatefromstring error');\\r\\n        }\\r\\n        $index = \\\\imagecolorat($image, 0, 0);\\r\\n        if (false === $index) {\\r\\n            throw new \\\\RuntimeException('Unexpected imagecolorat error');\\r\\n        }\\r\\n        $rgb = \\\\imagecolorsforindex($image, $index);\\r\\n        if (false === $rgb) {\\r\\n            throw new \\\\RuntimeException('Unexpected imagecolorsforindex error');\\r\\n        }\\r\\n        $red = \\\\round(\\\\round((($rgb['red'] ?? 255) / 0x33)) * 0x33);\\r\\n        $green = \\\\round(\\\\round((($rgb['green'] ?? 255) / 0x33)) * 0x33);\\r\\n        $blue = \\\\round(\\\\round((($rgb['blue'] ?? 255) / 0x33)) * 0x33);\\r\\n\\r\\n        return \\\\sprintf('#%02X%02X%02X', $red, $green, $blue);\\r\\n    } catch (\\\\Throwable $e) {\\r\\n        return '#FFFFFF';\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nCheck [Common Bundle documentation](https://github.com/ems-project/EMSCommonBundle/blob/master/doc/twig.md#ems_asset_average_color).\"},\"label\":\"Get an image average color\",\"type\":\"doc\"}]",
    "description": "How to computed the avarage color of an image",
    "label": "2021-05-30 Get image's average color",
    "locale": "en",
    "path": "blog/2021-05-30/get-image-average-color",
    "published_date": "2021-05-30T11:59:31+02:00",
    "search": [
        "Get an image average color",
        "The goal is to determine what's the average (dominant) color of an binary image (JPEG, PNG, GIF, WBMP, and GD2).\r\n\r\nI started from [this GitHub solution](https://stackoverflow.com/questions/3468500/detect-overall-average-color-of-the-picture#answer-38144826). Just that:\r\n - I used the elasticms common image resizing to reuse the cache mecanism (and not resize images each time)\r\n - I added RuntimeException exceptions\r\n - I backslash (\\\\) prefixed root class domain functions \r\n\r\n```injectablephp\r\npublic function assetAverageColor(string $hash): string\r\n{\r\n    try {\r\n        $config = $this->processor->configFactory($hash, [\r\n            EmsFields::ASSET_CONFIG_TYPE => EmsFields::ASSET_CONFIG_TYPE_IMAGE,\r\n            EmsFields::ASSET_CONFIG_RESIZE => 'free',\r\n            EmsFields::ASSET_CONFIG_WIDTH => 1,\r\n            EmsFields::ASSET_CONFIG_HEIGHT => 1,\r\n            EmsFields::ASSET_CONFIG_QUALITY => 80,\r\n            EmsFields::ASSET_CONFIG_MIME_TYPE => 'image/jpeg',\r\n        ]);\r\n        $stream = $this->processor->getStream($config, 'one-pixel.jpg');\r\n\r\n        $image = \\imagecreatefromstring($stream->getContents());\r\n        if (false === $image) {\r\n            throw new \\RuntimeException('Unexpected imagecreatefromstring error');\r\n        }\r\n        $index = \\imagecolorat($image, 0, 0);\r\n        if (false === $index) {\r\n            throw new \\RuntimeException('Unexpected imagecolorat error');\r\n        }\r\n        $rgb = \\imagecolorsforindex($image, $index);\r\n        if (false === $rgb) {\r\n            throw new \\RuntimeException('Unexpected imagecolorsforindex error');\r\n        }\r\n        $red = \\round(\\round((($rgb['red'] ?? 255) / 0x33)) * 0x33);\r\n        $green = \\round(\\round((($rgb['green'] ?? 255) / 0x33)) * 0x33);\r\n        $blue = \\round(\\round((($rgb['blue'] ?? 255) / 0x33)) * 0x33);\r\n\r\n        return \\sprintf('#%02X%02X%02X', $red, $green, $blue);\r\n    } catch (\\Throwable $e) {\r\n        return '#FFFFFF';\r\n    }\r\n}\r\n```\r\n\r\nCheck [Common Bundle documentation](https://github.com/ems-project/EMSCommonBundle/blob/master/doc/twig.md#ems_asset_average_color)."
    ],
    "template": "blog",
    "title": "Get image's average color"
}