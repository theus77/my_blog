{
    "blocks": "[{\"id\":\"03f9a9b9-8943-41f9-9d69-5aac1508d465\",\"label\":\"Goals\",\"type\":\"paragraph\",\"object\":{\"label\":\"Goals\",\"body\":\"<p>Let&#39;s try to improve the Elasticms Skeleton&#39;s performances and so also improve the referencing by google&nbsp;(and other search engine) of my website with&nbsp;<a href=\\\"https:\\/\\/developers.google.com\\/speed\\/pagespeed\\/insights\\/?hl=en&amp;url=https%3A%2F%2Fmathieu.dekeyzer.net%2F&amp;tab=mobile\\\" md-src-pos=\\\"212..355\\\">Google PageSpeed Insights<\\/a>.<\\/p>\"},\"children\":[]},{\"id\":\"8aa6f902-1af6-45d1-b81b-a9d81f349209\",\"label\":\"Just frontend best practices\",\"type\":\"paragraph\",\"object\":{\"label\":\"Just frontend best practices\",\"body\":\"<p>At the end, with this post, I&#39;ll would like to make some PR in Elasticms GitHub project but the first PageSpeed Insights&#39;s recommendations are about frontend developments.<\\/p>\"},\"children\":[{\"id\":\"86170ceb-a41d-431e-acac-37b8cac758aa\",\"label\":\"Eliminate render-blocking resources\",\"type\":\"doc\",\"object\":{\"body\":\"From an indexing standpoint, it's always better to display your content as soon as you can.\\r\\nYou should add an `async` *or* a `defer` attribute to your script tags.\\r\\nAlso do not forget to put your script tags at the end of the dom, just before the closing `<\\/body>`.\\r\\n\\r\\n```twig\\r\\n<script type=\\\"javascript\\\" src=\\\"{{ asset('bundles\\/emsch_assets\\/js\\/app.js') }}\\\" defer><\\/script>\\r\\n```\\r\\n\\r\\nThose 2 attributes:\\r\\n    - `defer` will wait the loading of the page before downloading the script\\r\\n    - `async` will run the script as soon as the script is available\\r\\n    \\r\\n    \\r\\nFor the CSS, it's a bit more tricky. They have to be located in the header; the only attribute that works is the `disabled`. You realize that, with that attribute, the CSS won't be loaded at all. Here come the trick:\\r\\n\\r\\n```twig\\r\\n<link rel=\\\"preload\\\" href=\\\"{{ asset('bundles\\/emsch_assets\\/css\\/app.css') }}\\\" as=\\\"style\\\" onload=\\\"this.onload=null;this.rel='stylesheet'\\\">\\r\\n<noscript><link rel=\\\"stylesheet\\\" href=\\\"{{ asset('bundles\\/emsch_assets\\/css\\/app.css') }}\\\"><\\/noscript>\\r\\n```\\r\\n\\r\\nIn this example, if JavaScript is supported by the client, the CSS will be loaded after the `onload` event.\\r\\n\\r\\nThe problem with that approach is that the page will quickly display the page without CSS than switch to its final apparance. This issue is know as [Cumulative Layout Shift (CLS)](https:\\/\\/web.dev\\/cls\\/).\\r\\n\\r\\nWe should keep this technique to load CSS rules that doesn't affect the page's rendering. I.e. the print CSS:\\r\\n\\r\\n```html\\r\\n<link rel=\\\"stylesheet\\\" href=\\\"{{ asset('bundles\\/emsch_assets\\/css\\/app.css') }}?{{ hash }}\\\">\\r\\n<link rel=\\\"preload\\\" href=\\\"{{ asset('bundles\\/emsch_assets\\/css\\/app.css') }}?{{ hash }}\\\" as=\\\"style\\\" onload=\\\"this.onload=null;this.rel='stylesheet'\\\"  media=\\\"print\\\">\\r\\n<noscript><link rel=\\\"stylesheet\\\" href=\\\"{{ asset('bundles\\/emsch_assets\\/css\\/app.css') }}?{{ hash }}\\\"><\\/noscript>\\r\\n```\\r\\nRemind you that you should also try to keep request counts low as possible. So your CSS finally looks like: \\r\\n\\r\\n\\r\\n```html\\r\\n<link rel=\\\"stylesheet\\\" href=\\\"{{ asset('bundles\\/emsch_assets\\/css\\/app.css') }}?{{ hash }}\\\">\\r\\n```\\r\\n\\r\\nYes, I know.\"},\"children\":[]},{\"id\":\"6e258b4e-3800-47eb-aa1d-e4745eb9afe0\",\"label\":\"Remove unused CSS\",\"type\":\"doc\",\"object\":{\"label\":\"Remove unused CSS\",\"body\":\"When we start with Bootstrap we usally include everything, but we may want to include only what's needed:\\r\\n\\r\\n```scss\\r\\n@import \\\"bootstrap-variables\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/functions\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/variables\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/mixins\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/root\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/reboot\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/type\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/images\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/code\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/grid\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/tables\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/forms\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/buttons\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/transitions\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/dropdown\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/button-group\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/input-group\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/custom-forms\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/nav\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/navbar\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/card\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/breadcrumb\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/pagination\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/badge\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/jumbotron\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/alert\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/progress\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/media\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/list-group\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/close\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/toasts\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/modal\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/tooltip\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/popover\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/carousel\\\";\\r\\n\\/\\/@import \\\"~bootstrap\\/scss\\/spinners\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/utilities\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/print\\\";\\r\\n\\r\\n$fa-font-path: \\\"~@fortawesome\\/fontawesome-free\\/webfonts\\\" !default;\\r\\n@import '~@fortawesome\\/fontawesome-free\\/scss\\/fontawesome';\\r\\n@import \\\"~@fortawesome\\/fontawesome-free\\/scss\\/brands\\\";\\r\\n\\/\\/@import \\\"~@fortawesome\\/fontawesome-free\\/scss\\/solid\\\";\\r\\n\\/\\/@import \\\"~@fortawesome\\/fontawesome-free\\/scss\\/regular\\\";\\r\\n\\r\\n\\/\\/@import \\\"~aos\\/dist\\/aos.css\\\";\\r\\n@import \\\"main\\\";\\r\\n```\\r\\n\\r\\nEven with that config you'll drag way too much CSS rules. PageSpeed Insights continues to complain.\\r\\n\\r\\nNow we move print rules into a dedicated CSS file:\\r\\n```scss\\r\\n@import \\\"bootstrap-variables\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/functions\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/variables\\\";\\r\\n@import \\\"~bootstrap\\/scss\\/print\\\";\\r\\n@import \\\"main_print\\\";\\r\\n```\"},\"children\":[]}]},{\"id\":\"58f064dc-cb8a-41f2-9dbb-685d553da0c2\",\"label\":\"Serve static assets with an efficient cache policy\",\"type\":\"doc\",\"object\":{\"label\":\"Serve static assets with an efficient cache policy\",\"body\":\"This recomandation is about improve the HTTP's headers. As, with the skeleton, we can very easily generate unique asset url by adding the assets archive's hash as query parameter:\\r\\n\\r\\n```twig\\r\\n<script type=\\\"javascript\\\" src=\\\"{{ asset('bundles\\/emsch_assets\\/js\\/app.js') }}?{{ hash }}\\\" defer async><\\/script>\\r\\n```\\r\\n\\r\\nEnsure that you add the hash parameter to all assets references. Now we can increase the max-age from 24h (default skeleton value) to 2 years by defining this environment variables:\\r\\n\\r\\n```\\r\\nAPACHE_CACHE_CONTROL='max-age=63072000, public'\\r\\n```\\r\\n\\r\\nYou can also add  an [immutable flag](https:\\/\\/hacks.mozilla.org\\/2017\\/01\\/using-immutable-caching-to-speed-up-the-web\\/).\\r\\n\\r\\n```\\r\\nAPACHE_CACHE_CONTROL='immutable, max-age=63072000, public'\\r\\n```\"},\"children\":[]},{\"id\":\"a5abc4fd-5268-4918-909f-bcdff8a3d5aa\",\"label\":\"Enable text compression\",\"type\":\"doc\",\"object\":{\"label\":\"Enable text compression\",\"body\":\"Finally, and it's probablly the only one, here is a PR to make.\\r\\n\\r\\nWe need to add the mod_deflate Apache module and acivate it for text response in the Skeleton docker image. \\r\\nJust a [small commit](https:\\/\\/github.com\\/ems-project\\/docker-php-fpm\\/commit\\/bfa38aad1e64cecc506bb5342929f655fa34b6f6).\\r\\n\\r\\nIf you aren't using the elasticms's docker image you have to activate it in you server's config.\"},\"children\":[]}]",
    "description": "improve the elasticms Skeleton's performances and so also improve it's referencing by google (and other search engine) with Google PageSpeed Insights",
    "keywords": "elasticms google pagespeed insights",
    "label": "2021-05-24 Skeleton's performances with Google PageSpeed Insights",
    "locale": "en",
    "path": "blog/2021-05-24/website-performances-with-pagespeed-insights",
    "published_date": "2021-05-24T11:52:05+02:00",
    "search": [
        "Goals",
        "Let&#39;s try to improve the Elasticms Skeleton&#39;s performances and so also improve the referencing by google&nbsp;(and other search engine) of my website with&nbsp;Google PageSpeed Insights.",
        "Just frontend best practices",
        "At the end, with this post, I&#39;ll would like to make some PR in Elasticms GitHub project but the first PageSpeed Insights&#39;s recommendations are about frontend developments.",
        "Eliminate render-blocking resources",
        "From an indexing standpoint, it's always better to display your content as soon as you can.\r\nYou should add an `async` *or* a `defer` attribute to your script tags.\r\nAlso do not forget to put your script tags at the end of the dom, just before the closing ``.\r\n\r\n```twig\r\n\r\n```\r\n\r\nThose 2 attributes:\r\n    - `defer` will wait the loading of the page before downloading the script\r\n    - `async` will run the script as soon as the script is available\r\n    \r\n    \r\nFor the CSS, it's a bit more tricky. They have to be located in the header; the only attribute that works is the `disabled`. You realize that, with that attribute, the CSS won't be loaded at all. Here come the trick:\r\n\r\n```twig\r\n\r\n\r\n```\r\n\r\nIn this example, if JavaScript is supported by the client, the CSS will be loaded after the `onload` event.\r\n\r\nThe problem with that approach is that the page will quickly display the page without CSS than switch to its final apparance. This issue is know as [Cumulative Layout Shift (CLS)](https://web.dev/cls/).\r\n\r\nWe should keep this technique to load CSS rules that doesn't affect the page's rendering. I.e. the print CSS:\r\n\r\n```html\r\n\r\n\r\n\r\n```\r\nRemind you that you should also try to keep request counts low as possible. So your CSS finally looks like: \r\n\r\n\r\n```html\r\n\r\n```\r\n\r\nYes, I know.",
        "Remove unused CSS",
        "When we start with Bootstrap we usally include everything, but we may want to include only what's needed:\r\n\r\n```scss\r\n@import \"bootstrap-variables\";\r\n@import \"~bootstrap/scss/functions\";\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins\";\r\n@import \"~bootstrap/scss/root\";\r\n@import \"~bootstrap/scss/reboot\";\r\n@import \"~bootstrap/scss/type\";\r\n@import \"~bootstrap/scss/images\";\r\n@import \"~bootstrap/scss/code\";\r\n@import \"~bootstrap/scss/grid\";\r\n//@import \"~bootstrap/scss/tables\";\r\n//@import \"~bootstrap/scss/forms\";\r\n@import \"~bootstrap/scss/buttons\";\r\n//@import \"~bootstrap/scss/transitions\";\r\n//@import \"~bootstrap/scss/dropdown\";\r\n//@import \"~bootstrap/scss/button-group\";\r\n//@import \"~bootstrap/scss/input-group\";\r\n//@import \"~bootstrap/scss/custom-forms\";\r\n@import \"~bootstrap/scss/nav\";\r\n//@import \"~bootstrap/scss/navbar\";\r\n@import \"~bootstrap/scss/card\";\r\n//@import \"~bootstrap/scss/breadcrumb\";\r\n//@import \"~bootstrap/scss/pagination\";\r\n//@import \"~bootstrap/scss/badge\";\r\n//@import \"~bootstrap/scss/jumbotron\";\r\n//@import \"~bootstrap/scss/alert\";\r\n@import \"~bootstrap/scss/progress\";\r\n//@import \"~bootstrap/scss/media\";\r\n//@import \"~bootstrap/scss/list-group\";\r\n//@import \"~bootstrap/scss/close\";\r\n//@import \"~bootstrap/scss/toasts\";\r\n//@import \"~bootstrap/scss/modal\";\r\n//@import \"~bootstrap/scss/tooltip\";\r\n//@import \"~bootstrap/scss/popover\";\r\n//@import \"~bootstrap/scss/carousel\";\r\n//@import \"~bootstrap/scss/spinners\";\r\n@import \"~bootstrap/scss/utilities\";\r\n@import \"~bootstrap/scss/print\";\r\n\r\n$fa-font-path: \"~@fortawesome/fontawesome-free/webfonts\" !default;\r\n@import '~@fortawesome/fontawesome-free/scss/fontawesome';\r\n@import \"~@fortawesome/fontawesome-free/scss/brands\";\r\n//@import \"~@fortawesome/fontawesome-free/scss/solid\";\r\n//@import \"~@fortawesome/fontawesome-free/scss/regular\";\r\n\r\n//@import \"~aos/dist/aos.css\";\r\n@import \"main\";\r\n```\r\n\r\nEven with that config you'll drag way too much CSS rules. PageSpeed Insights continues to complain.\r\n\r\nNow we move print rules into a dedicated CSS file:\r\n```scss\r\n@import \"bootstrap-variables\";\r\n@import \"~bootstrap/scss/functions\";\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/print\";\r\n@import \"main_print\";\r\n```",
        "Serve static assets with an efficient cache policy",
        "This recomandation is about improve the HTTP's headers. As, with the skeleton, we can very easily generate unique asset url by adding the assets archive's hash as query parameter:\r\n\r\n```twig\r\n\r\n```\r\n\r\nEnsure that you add the hash parameter to all assets references. Now we can increase the max-age from 24h (default skeleton value) to 2 years by defining this environment variables:\r\n\r\n```\r\nAPACHE_CACHE_CONTROL='max-age=63072000, public'\r\n```\r\n\r\nYou can also add  an [immutable flag](https://hacks.mozilla.org/2017/01/using-immutable-caching-to-speed-up-the-web/).\r\n\r\n```\r\nAPACHE_CACHE_CONTROL='immutable, max-age=63072000, public'\r\n```",
        "Enable text compression",
        "Finally, and it's probablly the only one, here is a PR to make.\r\n\r\nWe need to add the mod_deflate Apache module and acivate it for text response in the Skeleton docker image. \r\nJust a [small commit](https://github.com/ems-project/docker-php-fpm/commit/bfa38aad1e64cecc506bb5342929f655fa34b6f6).\r\n\r\nIf you aren't using the elasticms's docker image you have to activate it in you server's config."
    ],
    "template": "blog",
    "title": "Improve Skeleton's performances with Google PageSpeed Insights"
}