{
    "blocks": "[{\"id\":\"b134edd4-9ea2-4744-ad1f-ddb428d1d491\",\"type\":\"doc\",\"object\":{\"label\":\"Objectifs\",\"body\":\"Depuis la version 3.7 du Skeleton d'elasticms nous avons la possibilit\u00e9 de travailler avec des templates,\\r\\ndes routes et des cl\u00e9s de traduction en local. \\r\\n\\r\\nL'avantage de cette approche est de pouvoir travailler en local, avec n'importe quels environments de \\r\\npublication (preview, staging, live) et n'importe quels environments de d\u00e9ploiement (test, int\u00e9gration, \\r\\nacceptation, live) directement avec des fichiers yaml pour les routes et les traductions et des \\r\\ntwig pour les templates.\"},\"label\":\"Objectifs\"},{\"id\":\"c8cee31c-0bd5-487c-a0d4-01060b387690\",\"type\":\"doc\",\"object\":{\"label\":\"Remarques\",\"body\":\"Pour que ces versions locales des routes, cl\u00e9s de traduction et templates fonctionnent, il est imp\u00e9ratif \\r\\nd'\u00eatre en mode debug. C'est \u00e0 dire que la variable `APP_ENV` soit \u00e9gale \u00e0 `dev`.\\r\\n\\r\\nAutrement dit, si tu vois pas la debug bar de Symfony c'est mort. Tu peux changer tous ce que tu veux,\\r\\ntu ne veras aucuns changements.\\r\\n\\r\\nSans cela les fichiers locaux sont ignor\u00e9s et seuls les contenus index\u00e9s dans le cluster elasticsearch \\r\\ndepuis l'elasticms seront consid\u00e9r\u00e9s.\"},\"label\":\"Remarques\"},{\"id\":\"a4bc320c-29f7-4a7f-b651-90dabb72f9cd\",\"type\":\"doc\",\"object\":{\"label\":\"Flux standard\",\"body\":\"Imaginons que nous ayons un projet elasticms avec les 3 environnements suivants:\\r\\n - template\\r\\n - preview\\r\\n - live\\r\\n\\r\\nD\u00e9ploy\u00e9 en acc.\\r\\n\\r\\nEt qu'il faille mettre \u00e0 jour un d\u00e9veloppement CSS dans les assets.\\r\\n\\r\\n\\r\\nUne fois le d\u00e9veloppement valid\u00e9, il faudra alors le pousser jusqu'en production live.\"},\"label\":\"Flux standard\",\"children\":[{\"id\":\"99228b54-fc28-4fd0-bf94-212881b7abb9\",\"type\":\"doc\",\"object\":{\"label\":\"1: Identifier la commande du skeleton\",\"body\":\"Dans votre projet skeleton vous devriez voir un folder `configs/skeleton`. Dans ce folder il doit y \\r\\navoir tout une s\u00e9rie de fichier Dotenv (.env).\\r\\n\\r\\n\\r\\nId\u00e9alement vous devriez avoir un fichier par environnement de publication (template, preview, live):\\r\\n\\r\\n - preview.env\\r\\n - template.env\\r\\n - zz_live.env\\r\\n\\r\\n\\r\\nSur cette base on vient d'identifier 3 environements de publication `preview`, `template` et `zz_live`.\\r\\n\\r\\nNB: le `zz_` est ajout\u00e9 par le d\u00e9veloppeur car il a un \\\"catch all domains\\\" d\u00e9finit dans le fichier. \\r\\nPour faire simple il y a tr\u00e8s probablement la ligne suivante `SERVER_ALIASES=\\\"*\\\"` qui s' assure que \\r\\nsi une requ\u00eate arrive dans le pod avec un domaine inconnu il aura d'office une r\u00e9ponse avec un \\r\\ncontenu 'live' plut\u00f4t qu'une page d'erreur.\\r\\n\\r\\n\\r\\nSi ce n'est pas le cas je vous invite \u00e0 refactorer vos fichiers .env pour que cela soit le cas. \\r\\nDans ce fichier les variables propres \u00e0 l'environnement de publication devraient r\u00e9f\u00e9rencer \\r\\nd'autres variables d\u00e9finies dans le docker-compose. Comme ici avec les variables `ENVIRONMENT_ALIAS_BASE_PATH` et `BACKEND_URL`:\\r\\n\\r\\n```dotenv\\r\\nENVIRONMENT_ALIAS='${ENVIRONMENT_ALIAS_BASE_PATH}artists_preview'\\r\\nEMS_STORAGES='[{\\\"type\\\":\\\"fs\\\",\\\"path\\\":\\\"/tmp/assets\\\",\\\"usage\\\":\\\"cache\\\"},{\\\"type\\\":\\\"s3\\\",\\\"usage\\\":\\\"external\\\",\\\"credentials\\\":{\\\"version\\\":\\\"2006-03-01\\\",\\\"credentials\\\":{\\\"key\\\":\\\"${S3_ACCESS_KEY_ID}\\\",\\\"secret\\\":\\\"${S3_SECRET_ACCESS_KEY}\\\"},\\\"region\\\":\\\"${S3_DEFAULT_REGION}\\\",\\\"endpoint\\\":\\\"${S3_ENDPOINT_URL}\\\",\\\"use_path_style_endpoint\\\":true},\\\"bucket\\\":\\\"${S3_BUCKET_NAME}\\\"},{\\\"type\\\":\\\"http\\\",\\\"usage\\\":\\\"external\\\",\\\"base-url\\\":\\\"${BACKEND_URL}\\\"}]'\\r\\nEMSCH_BACKEND_URL='${BACKEND_URL}'\\r\\nEMSCH_ENVS='{\\\"preview\\\":{\\\"regex\\\":\\\"/.*/\\\",\\\"alias\\\":\\\"artists_preview\\\",\\\"request\\\":{\\\"_locale\\\":\\\"fr\\\"},\\\"backend\\\":\\\"${BACKEND_URL}\\\"}}'\\r\\n```\\r\\n\\r\\n\\r\\nPour r\u00e9sumer vous ne devriez jamais retrouver dans ces fichiers des urls vers les clusters \\r\\nelasticsearch ou vers les admins elasticsearch li\u00e9s \u00e0 un quelconque environment de d\u00e9ploiement \\r\\n(test, int, acc, prod). Mais plut\u00f4t des r\u00e9f\u00e9rences du type `${BACKEND_URL}` ou \\r\\n`${EMS_ELASTICSEARCH_HOSTS}`.\\r\\n\\r\\n\\r\\nVous pouvez maintenant lancer la commande `docker-compose ps --services` qui devrait vous donner:\\r\\n\\r\\n```\\r\\nartists-acc\\r\\nartists-prd\\r\\n```\\r\\n\\r\\n\\r\\nNous venons d'identifier 2 environnements de d\u00e9ploiement `artists-acc` et `artists-prd`.\\r\\nVous \u00eates en mesure de lancer la commande Symfony du Skeleton pour toutes les \\r\\ncombinaisons d'environments:\\r\\n\\r\\n - acc:\\r\\n    -  template: `docker-compose exec artists-acc template`\\r\\n    -  preview: `docker-compose exec artists-acc preview`\\r\\n    -  live: `docker-compose exec artists-acc zz_live`\\r\\n - prd:\\r\\n    -  template: `docker-compose exec artists-prd template`\\r\\n    -  preview: `docker-compose exec artists-prd preview`\\r\\n    -  live: `docker-compose exec artists-prd zz_live`\\r\\n\\r\\n\\r\\n\\r\\nSi vous voulez connaitre le status entre vos fichier locaux et ceux publi\u00e9s en `preview` sur `artists-prd` vous lancez:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-prd preview ems:local:status\\r\\n```\\r\\n\\r\\nEt pour faire de m\u00eame mais depuis `template` sur `artists-acc`:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-acc template ems:local:status\\r\\n```\\r\\n\\r\\nvat donner:\\r\\n\\r\\n```\\r\\nLocal development - status\\r\\n==========================\\r\\n\\r\\n -------------- ------------------------------------------------- \\r\\n  Environment    template                                         \\r\\n  Backend url    https://artists-admin.acc.ext.socialsecurity.be  \\r\\n  Logged in as   No                                               \\r\\n  Up to date     Yes                                              \\r\\n -------------- ------------------------------------------------- \\r\\n\\r\\n+--------------+-------+---------+---------+\\r\\n|              | Added | Updated | Deleted |\\r\\n+--------------+-------+---------+---------+\\r\\n| Routing      | 0     | 0       | 0       |\\r\\n| Templating   | 0     | 0       | 0       |\\r\\n| Translations | 0     | 0       | 0       |\\r\\n+--------------+-------+---------+---------+\\r\\n\\r\\n * Duration: 0 s\\r\\n * Memory: 18 MB\\r\\n```\"},\"label\":\"1: Identifier la commande du skeleton\"},{\"id\":\"97261c01-5d56-46f8-a5ee-8899a4bb9079\",\"object\":{\"label\":\"2: Avant de faire un ems:local:pull !\",\"body\":\"J'esp\u00e8re vraiment pour vous que vous utilisez un outil de versionning comme git. Mais il est \\r\\nimportant (vraiment) de bien versioner son travail dans votre repository de d\u00e9veloppement.\\r\\n\\r\\n\\r\\nEn effet chaque environment de d\u00e9ploiement (test, int, acc, prod) peut \u00eatre vu comme un repository \\r\\nremote. \\r\\nVous \u00eates donc un peu dans une situation comme si vous aviez repository remotes pour vos fichiers.\\r\\n\\r\\nDonc si vous lancez une commande `ems:local:pull`; toutes vos modifications en local seront perdues \u00e0 \\r\\njamais. Donc avant de faire un `ems:local:pull` pensez \u00e0 **toujours** faire au moins un `git commit`, \\r\\nne fusse que pour sauver localement les derniers changements.\"},\"label\":\"2: Avant de faire un ems:local:pull !\",\"type\":\"doc\"},{\"id\":\"9f550065-9c1c-4832-a9df-669a44440f14\",\"type\":\"doc\",\"object\":{\"label\":\"3: Reprendre la source authentique\",\"body\":\"Votre projet git est \u00e0 jour, vous avez bien cr\u00e9\u00e9 une nouvelle branche pour traiter la demande. Et tout est bien commit\u00e9.\\r\\nOn peut donc reprendre les fichier depuis la source authentique.\\r\\n\\r\\nEn effet, on ne sait jamais. Il est possible que quelqu'un ait modifi\u00e9 quelque chose directement dans l'elasticms de production sans rien dire \u00e0 personne et qu'il l'ait publi\u00e9 en live.\\r\\n\\r\\nPour cela nous allons donc reprendre les contenus en local depuis la production live:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-prd zz_live ems:local:pull\\r\\n```\\r\\n\\r\\nCette op\u00e9ration \u00e9crase, vous l'aurez compris, vos fichiers locaux. Je vous invite donc \u00e0 v\u00e9rifier tous les \u00e9ventuels changements (rollback depuis git) qu'il y aura eu en production live. \\r\\n\\r\\nMais \u00e0 priori, il devrait suffire d'annuler tous les changements. Car, en th\u00e9orie, personne n'aurait rien publi\u00e9 directement depuis l'elasticms de production ;-).\"},\"label\":\"3: Reprendre la source authentique\"},{\"id\":\"97e94ca1-b097-4e0a-839e-b4281de764de\",\"type\":\"doc\",\"object\":{\"label\":\"4: Reprendre le hash depuis l'environment par d\u00e9faut\",\"body\":\"Avant d'\u00eatre en mesure de pousser vos modifications dans l'environnement par d\u00e9faut \\r\\n(template dans notre exemple) de l'acceptation, vous devez d\u00e9montrer que vous venez bien \\r\\nfaire une modification de la version \\\"courante\\\" des contenus.\\r\\n\\r\\n\\r\\nPour cela elasticms se base sur un hash qui repr\u00e9sente la signature num\u00e9rique de l'\u00e9tat de vos contenus. Si vous voulez  mettre \u00e0 jour le template d'acc il est imp\u00e9ratif de d'abord r\u00e9cup\u00e9rer la signature des contenus template d'acc avant.\\r\\n\\r\\nCela s'obtient avec la commande pull:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-acc template ems:local:pull\\r\\n```\\r\\n\\r\\nComme toujours avec le pull vous perdez vos modifications.\\r\\n\\r\\nM\u00eame s'il est toujours bon de v\u00e9rifier les diff\u00e9rences, l'id\u00e9e ici est de faire un rollback de toutes les modifications par rapport au git saur pour le fichier `skeleton/.version` qui contient justement ce hash.\\r\\n\\r\\nJe vous invite \u00e0 commiter cette modification.\"},\"label\":\"4: Reprendre le hash depuis l'environment par d\u00e9faut\"},{\"id\":\"f8bc04e7-a6e2-40be-8dfa-b0abba14f673\",\"type\":\"doc\",\"object\":{\"label\":\"5: Faire votre boulot\",\"body\":\"Vous pouvez d\u00e9sormais traiter, et tester en local, votre ticket. Ou vos tickets.\\r\\n\\r\\n\\r\\nUne fois fini, toujours bien commiter (et puller) vos fichiers dans git, hg, cvs, ....\\r\\n\\r\\n\\r\\nDans notre exemple, il \u00e9tait question de mettre \u00e0 jour une CSS. On doit donc, \u00e0 priori, uploader une nouvelle version des assets.\"},\"label\":\"5: Faire votre boulot\",\"children\":[{\"id\":\"888aba9a-f72d-48fb-b1b8-d8be2c0232ad\",\"type\":\"doc\",\"object\":{\"label\":\"5.1: G\u00e9n\u00e9rer les assets de production\",\"body\":\"Il faut g\u00e9n\u00e9rer les css et js minifi\u00e9s. Mais il n'est plus utile de les compresser dans un zip (`npm run release` a \u00e9t\u00e9 supprim\u00e9):\\r\\n```\\r\\nnpm run prod\\r\\n```\"},\"label\":\"5.1: G\u00e9n\u00e9rer les assets de production\"},{\"id\":\"3c23106c-4094-485f-af29-4505af4da548\",\"type\":\"doc\",\"object\":{\"label\":\"5.2: Identifier son skeleton local\",\"body\":\"Avant de modifier quelque chose on doit s'identifier dans l'elasticms d'acceptation:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-acc template ems:local:login\\r\\n```\\r\\n\\r\\nDonne: \\r\\n```\\r\\n Username:\\r\\n > mdk\\r\\n\\r\\n Password:\\r\\n > \\r\\n\\r\\nLocal development - login\\r\\n=========================\\r\\n\\r\\n                                                                                                                        \\r\\n [OK] Welcome mdk on https://artists-admin.mondomaine.be                                                    \\r\\n                                                                                                                        \\r\\n\\r\\n\\r\\n * Duration: 9 s\\r\\n * Memory: 18 MB\\r\\n\\r\\n```\\r\\n\\r\\nEn cas de probl\u00e8me toujours v\u00e9rifier que votre utilisateur \u00e0 bien les droits API dans elasticms (sur /profile/).\"},\"label\":\"5.2: Identifier son skeleton local\"},{\"id\":\"c3f9e526-3a20-4c2e-931a-9405a2012d11\",\"type\":\"doc\",\"object\":{\"label\":\"5.3: Uploader les assets\",\"body\":\"Il existe une commande qui s'occupe d'uploader les assets.\\r\\nL'environment de d\u00e9ploiement n'a pas vraiment de sens ici, mais j'utilise l'environment par d\u00e9faut `template` par coh\u00e9rence.\\r\\n\\r\\nVoici la commande\\r\\n```\\r\\ndocker-compose exec artists-acc template ems:local:upload-asset\\r\\n```\\r\\n\\r\\nQui donne:\\r\\n```\\r\\nLocal development - Upload assets\\r\\n=================================\\r\\n\\r\\n 2620273/2620273 [\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593] 100%\\r\\n\\r\\n                                                                                                                        \\r\\n [OK] Assets cc84833dd68cd71dfaea873e93d17c314feda34a have been uploaded                                                \\r\\n                                                                                                                        \\r\\n\\r\\n\\r\\n * Duration: 5 s\\r\\n * Memory: 18 MB\\r\\n```\\r\\n\\r\\n\\r\\nCette commande archive les assets, les upload et affiche le hash. Ici `cc84833dd68cd71dfaea873e93d17c314feda34a`.\"},\"label\":\"5.3: Uploader les assets\"},{\"id\":\"e6dccc31-5663-4960-9bda-4d08c6d22408\",\"type\":\"doc\",\"object\":{\"label\":\"5.4: Mettre \u00e0 jour le variables.twig\",\"body\":\"Avec ce hash vous pouvez mettre \u00e0 jour la variable `hash`, `hashAssets` ou `site_hash` \\r\\ndans les cl\u00e9s de traduction ou dans le Twig variables.twig. C'est selon les cas.\"},\"label\":\"5.4: Mettre \u00e0 jour le variables.twig\"}]},{\"id\":\"2f9c7e3a-2ca1-4d27-8de7-d86bf389934f\",\"type\":\"doc\",\"object\":{\"label\":\"6. Pousser les modifications en acc template\",\"body\":\"On est fin pr\u00eat \u00e0 pousser en template acc:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-acc template ems:local:push\\r\\n```\\r\\n\\r\\nCette commande vat mettre \u00e0 jour le hash dans `skeleton/.version`. Je vous invite \u00e0 commiter ces derniers changements (hash des assets et hash du contenu template d'acc).\"},\"label\":\"6. Pousser les modifications en acc template\"},{\"id\":\"0e5cad51-0dde-4462-a759-edf7d22fdcd8\",\"type\":\"doc\",\"object\":{\"label\":\"7. Aligner le preview et le live d'acc\",\"body\":\"Apr\u00e8s vos tests en template, vous pouvez aligner vos contenus route, template et translation en acc depuis l'admin elasticms d'acceptation.\"},\"label\":\"7. Aligner le preview et le live d'acc\"},{\"id\":\"3b0554e2-4c7b-45db-bab1-a614abf59666\",\"type\":\"doc\",\"object\":{\"label\":\"8. Reprendre le hash de production template\",\"body\":\"Avant d'\u00eatre en mesure de pousser vos modifications dans l'environnement par d\u00e9faut (template dans notre exemple) de production, vous devez d\u00e9montrer que vous venez bien faire une modification sur la version \\\"courante\\\" des contenus.\\r\\n\\r\\n\\r\\nC'est donc la m\u00eame chose que ce qu'on a fait pour l'acceptation, il est imp\u00e9ratif de d'abord r\u00e9cup\u00e9rer la signature des contenus template de production avant.\\r\\n\\r\\nCela s'obtient avec la commande pull:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-prd template ems:local:pull\\r\\n```\\r\\n\\r\\nComme toujours avec le pull vous perdez vos modifications.\\r\\n\\r\\nComme vous \u00eates s\u00fbr de vos modifications vous pouvez faire un rollback de toutes les modifications \\r\\npar rapport au git sauf pour le fichier `skeleton/.version` qui contient justement le hash du contenu template de production.\"},\"label\":\"8. Reprendre le hash de production template\"},{\"id\":\"8ed2e770-1839-4b82-badb-644bbafff78d\",\"type\":\"doc\",\"object\":{\"label\":\"9. Pousser en production template\",\"body\":\"Vous pouvez maintenant d\u00e9ployer vos modifications en production:\\r\\n\\r\\n```\\r\\ndocker-compose exec artists-prd template ems:local:push\\r\\n```\"},\"label\":\"9. Pousser en production template\"},{\"id\":\"ebffdfeb-1ded-4a75-b6b9-cebbd1e65615\",\"type\":\"doc\",\"object\":{\"label\":\"10: Aligner le preview et le live de production\",\"body\":\"Apr\u00e8s vos tests en template, vous pouvez aligner vos contenus route, template et translation en production depuis l'admin elasticms de production.\"},\"label\":\"10: Aligner le preview et le live de production\"}]}]",
    "description": "Explication sur l'utilisation des commandes \"locale\" d'elesticms skeleton",
    "label": "2021-06-09 Utiliser les commandes skeleton locales",
    "locale": "fr",
    "path": "blog/2021-06-09-utiliser-les-commandes-skeleton-locales",
    "published_date": "2021-06-09T16:42:30+02:00",
    "search": [
        "Objectifs",
        "Depuis la version 3.7 du Skeleton d'elasticms nous avons la possibilit\u00e9 de travailler avec des templates,\r\ndes routes et des cl\u00e9s de traduction en local. \r\n\r\nL'avantage de cette approche est de pouvoir travailler en local, avec n'importe quels environments de \r\npublication (preview, staging, live) et n'importe quels environments de d\u00e9ploiement (test, int\u00e9gration, \r\nacceptation, live) directement avec des fichiers yaml pour les routes et les traductions et des \r\ntwig pour les templates.",
        "Remarques",
        "Pour que ces versions locales des routes, cl\u00e9s de traduction et templates fonctionnent, il est imp\u00e9ratif \r\nd'\u00eatre en mode debug. C'est \u00e0 dire que la variable `APP_ENV` soit \u00e9gale \u00e0 `dev`.\r\n\r\nAutrement dit, si tu vois pas la debug bar de Symfony c'est mort. Tu peux changer tous ce que tu veux,\r\ntu ne veras aucuns changements.\r\n\r\nSans cela les fichiers locaux sont ignor\u00e9s et seuls les contenus index\u00e9s dans le cluster elasticsearch \r\ndepuis l'elasticms seront consid\u00e9r\u00e9s.",
        "Flux standard",
        "Imaginons que nous ayons un projet elasticms avec les 3 environnements suivants:\r\n - template\r\n - preview\r\n - live\r\n\r\nD\u00e9ploy\u00e9 en acc.\r\n\r\nEt qu'il faille mettre \u00e0 jour un d\u00e9veloppement CSS dans les assets.\r\n\r\n\r\nUne fois le d\u00e9veloppement valid\u00e9, il faudra alors le pousser jusqu'en production live.",
        "1: Identifier la commande du skeleton",
        "Dans votre projet skeleton vous devriez voir un folder `configs/skeleton`. Dans ce folder il doit y \r\navoir tout une s\u00e9rie de fichier Dotenv (.env).\r\n\r\n\r\nId\u00e9alement vous devriez avoir un fichier par environnement de publication (template, preview, live):\r\n\r\n - preview.env\r\n - template.env\r\n - zz_live.env\r\n\r\n\r\nSur cette base on vient d'identifier 3 environements de publication `preview`, `template` et `zz_live`.\r\n\r\nNB: le `zz_` est ajout\u00e9 par le d\u00e9veloppeur car il a un \"catch all domains\" d\u00e9finit dans le fichier. \r\nPour faire simple il y a tr\u00e8s probablement la ligne suivante `SERVER_ALIASES=\"*\"` qui s' assure que \r\nsi une requ\u00eate arrive dans le pod avec un domaine inconnu il aura d'office une r\u00e9ponse avec un \r\ncontenu 'live' plut\u00f4t qu'une page d'erreur.\r\n\r\n\r\nSi ce n'est pas le cas je vous invite \u00e0 refactorer vos fichiers .env pour que cela soit le cas. \r\nDans ce fichier les variables propres \u00e0 l'environnement de publication devraient r\u00e9f\u00e9rencer \r\nd'autres variables d\u00e9finies dans le docker-compose. Comme ici avec les variables `ENVIRONMENT_ALIAS_BASE_PATH` et `BACKEND_URL`:\r\n\r\n```dotenv\r\nENVIRONMENT_ALIAS='${ENVIRONMENT_ALIAS_BASE_PATH}artists_preview'\r\nEMS_STORAGES='[{\"type\":\"fs\",\"path\":\"/tmp/assets\",\"usage\":\"cache\"},{\"type\":\"s3\",\"usage\":\"external\",\"credentials\":{\"version\":\"2006-03-01\",\"credentials\":{\"key\":\"${S3_ACCESS_KEY_ID}\",\"secret\":\"${S3_SECRET_ACCESS_KEY}\"},\"region\":\"${S3_DEFAULT_REGION}\",\"endpoint\":\"${S3_ENDPOINT_URL}\",\"use_path_style_endpoint\":true},\"bucket\":\"${S3_BUCKET_NAME}\"},{\"type\":\"http\",\"usage\":\"external\",\"base-url\":\"${BACKEND_URL}\"}]'\r\nEMSCH_BACKEND_URL='${BACKEND_URL}'\r\nEMSCH_ENVS='{\"preview\":{\"regex\":\"/.*/\",\"alias\":\"artists_preview\",\"request\":{\"_locale\":\"fr\"},\"backend\":\"${BACKEND_URL}\"}}'\r\n```\r\n\r\n\r\nPour r\u00e9sumer vous ne devriez jamais retrouver dans ces fichiers des urls vers les clusters \r\nelasticsearch ou vers les admins elasticsearch li\u00e9s \u00e0 un quelconque environment de d\u00e9ploiement \r\n(test, int, acc, prod). Mais plut\u00f4t des r\u00e9f\u00e9rences du type `${BACKEND_URL}` ou \r\n`${EMS_ELASTICSEARCH_HOSTS}`.\r\n\r\n\r\nVous pouvez maintenant lancer la commande `docker-compose ps --services` qui devrait vous donner:\r\n\r\n```\r\nartists-acc\r\nartists-prd\r\n```\r\n\r\n\r\nNous venons d'identifier 2 environnements de d\u00e9ploiement `artists-acc` et `artists-prd`.\r\nVous \u00eates en mesure de lancer la commande Symfony du Skeleton pour toutes les \r\ncombinaisons d'environments:\r\n\r\n - acc:\r\n    -  template: `docker-compose exec artists-acc template`\r\n    -  preview: `docker-compose exec artists-acc preview`\r\n    -  live: `docker-compose exec artists-acc zz_live`\r\n - prd:\r\n    -  template: `docker-compose exec artists-prd template`\r\n    -  preview: `docker-compose exec artists-prd preview`\r\n    -  live: `docker-compose exec artists-prd zz_live`\r\n\r\n\r\n\r\nSi vous voulez connaitre le status entre vos fichier locaux et ceux publi\u00e9s en `preview` sur `artists-prd` vous lancez:\r\n\r\n```\r\ndocker-compose exec artists-prd preview ems:local:status\r\n```\r\n\r\nEt pour faire de m\u00eame mais depuis `template` sur `artists-acc`:\r\n\r\n```\r\ndocker-compose exec artists-acc template ems:local:status\r\n```\r\n\r\nvat donner:\r\n\r\n```\r\nLocal development - status\r\n==========================\r\n\r\n -------------- ------------------------------------------------- \r\n  Environment    template                                         \r\n  Backend url    https://artists-admin.acc.ext.socialsecurity.be  \r\n  Logged in as   No                                               \r\n  Up to date     Yes                                              \r\n -------------- ------------------------------------------------- \r\n\r\n+--------------+-------+---------+---------+\r\n|              | Added | Updated | Deleted |\r\n+--------------+-------+---------+---------+\r\n| Routing      | 0     | 0       | 0       |\r\n| Templating   | 0     | 0       | 0       |\r\n| Translations | 0     | 0       | 0       |\r\n+--------------+-------+---------+---------+\r\n\r\n * Duration: 0 s\r\n * Memory: 18 MB\r\n```",
        "2: Avant de faire un ems:local:pull !",
        "J'esp\u00e8re vraiment pour vous que vous utilisez un outil de versionning comme git. Mais il est \r\nimportant (vraiment) de bien versioner son travail dans votre repository de d\u00e9veloppement.\r\n\r\n\r\nEn effet chaque environment de d\u00e9ploiement (test, int, acc, prod) peut \u00eatre vu comme un repository \r\nremote. \r\nVous \u00eates donc un peu dans une situation comme si vous aviez repository remotes pour vos fichiers.\r\n\r\nDonc si vous lancez une commande `ems:local:pull`; toutes vos modifications en local seront perdues \u00e0 \r\njamais. Donc avant de faire un `ems:local:pull` pensez \u00e0 **toujours** faire au moins un `git commit`, \r\nne fusse que pour sauver localement les derniers changements.",
        "3: Reprendre la source authentique",
        "Votre projet git est \u00e0 jour, vous avez bien cr\u00e9\u00e9 une nouvelle branche pour traiter la demande. Et tout est bien commit\u00e9.\r\nOn peut donc reprendre les fichier depuis la source authentique.\r\n\r\nEn effet, on ne sait jamais. Il est possible que quelqu'un ait modifi\u00e9 quelque chose directement dans l'elasticms de production sans rien dire \u00e0 personne et qu'il l'ait publi\u00e9 en live.\r\n\r\nPour cela nous allons donc reprendre les contenus en local depuis la production live:\r\n\r\n```\r\ndocker-compose exec artists-prd zz_live ems:local:pull\r\n```\r\n\r\nCette op\u00e9ration \u00e9crase, vous l'aurez compris, vos fichiers locaux. Je vous invite donc \u00e0 v\u00e9rifier tous les \u00e9ventuels changements (rollback depuis git) qu'il y aura eu en production live. \r\n\r\nMais \u00e0 priori, il devrait suffire d'annuler tous les changements. Car, en th\u00e9orie, personne n'aurait rien publi\u00e9 directement depuis l'elasticms de production ;-).",
        "4: Reprendre le hash depuis l'environment par d\u00e9faut",
        "Avant d'\u00eatre en mesure de pousser vos modifications dans l'environnement par d\u00e9faut \r\n(template dans notre exemple) de l'acceptation, vous devez d\u00e9montrer que vous venez bien \r\nfaire une modification de la version \"courante\" des contenus.\r\n\r\n\r\nPour cela elasticms se base sur un hash qui repr\u00e9sente la signature num\u00e9rique de l'\u00e9tat de vos contenus. Si vous voulez  mettre \u00e0 jour le template d'acc il est imp\u00e9ratif de d'abord r\u00e9cup\u00e9rer la signature des contenus template d'acc avant.\r\n\r\nCela s'obtient avec la commande pull:\r\n\r\n```\r\ndocker-compose exec artists-acc template ems:local:pull\r\n```\r\n\r\nComme toujours avec le pull vous perdez vos modifications.\r\n\r\nM\u00eame s'il est toujours bon de v\u00e9rifier les diff\u00e9rences, l'id\u00e9e ici est de faire un rollback de toutes les modifications par rapport au git saur pour le fichier `skeleton/.version` qui contient justement ce hash.\r\n\r\nJe vous invite \u00e0 commiter cette modification.",
        "5: Faire votre boulot",
        "Vous pouvez d\u00e9sormais traiter, et tester en local, votre ticket. Ou vos tickets.\r\n\r\n\r\nUne fois fini, toujours bien commiter (et puller) vos fichiers dans git, hg, cvs, ....\r\n\r\n\r\nDans notre exemple, il \u00e9tait question de mettre \u00e0 jour une CSS. On doit donc, \u00e0 priori, uploader une nouvelle version des assets.",
        "5.1: G\u00e9n\u00e9rer les assets de production",
        "Il faut g\u00e9n\u00e9rer les css et js minifi\u00e9s. Mais il n'est plus utile de les compresser dans un zip (`npm run release` a \u00e9t\u00e9 supprim\u00e9):\r\n```\r\nnpm run prod\r\n```",
        "5.2: Identifier son skeleton local",
        "Avant de modifier quelque chose on doit s'identifier dans l'elasticms d'acceptation:\r\n\r\n```\r\ndocker-compose exec artists-acc template ems:local:login\r\n```\r\n\r\nDonne: \r\n```\r\n Username:\r\n > mdk\r\n\r\n Password:\r\n > \r\n\r\nLocal development - login\r\n=========================\r\n\r\n                                                                                                                        \r\n [OK] Welcome mdk on https://artists-admin.mondomaine.be                                                    \r\n                                                                                                                        \r\n\r\n\r\n * Duration: 9 s\r\n * Memory: 18 MB\r\n\r\n```\r\n\r\nEn cas de probl\u00e8me toujours v\u00e9rifier que votre utilisateur \u00e0 bien les droits API dans elasticms (sur /profile/).",
        "5.3: Uploader les assets",
        "Il existe une commande qui s'occupe d'uploader les assets.\r\nL'environment de d\u00e9ploiement n'a pas vraiment de sens ici, mais j'utilise l'environment par d\u00e9faut `template` par coh\u00e9rence.\r\n\r\nVoici la commande\r\n```\r\ndocker-compose exec artists-acc template ems:local:upload-asset\r\n```\r\n\r\nQui donne:\r\n```\r\nLocal development - Upload assets\r\n=================================\r\n\r\n 2620273/2620273 [\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593] 100%\r\n\r\n                                                                                                                        \r\n [OK] Assets cc84833dd68cd71dfaea873e93d17c314feda34a have been uploaded                                                \r\n                                                                                                                        \r\n\r\n\r\n * Duration: 5 s\r\n * Memory: 18 MB\r\n```\r\n\r\n\r\nCette commande archive les assets, les upload et affiche le hash. Ici `cc84833dd68cd71dfaea873e93d17c314feda34a`.",
        "5.4: Mettre \u00e0 jour le variables.twig",
        "Avec ce hash vous pouvez mettre \u00e0 jour la variable `hash`, `hashAssets` ou `site_hash` \r\ndans les cl\u00e9s de traduction ou dans le Twig variables.twig. C'est selon les cas.",
        "6. Pousser les modifications en acc template",
        "On est fin pr\u00eat \u00e0 pousser en template acc:\r\n\r\n```\r\ndocker-compose exec artists-acc template ems:local:push\r\n```\r\n\r\nCette commande vat mettre \u00e0 jour le hash dans `skeleton/.version`. Je vous invite \u00e0 commiter ces derniers changements (hash des assets et hash du contenu template d'acc).",
        "7. Aligner le preview et le live d'acc",
        "Apr\u00e8s vos tests en template, vous pouvez aligner vos contenus route, template et translation en acc depuis l'admin elasticms d'acceptation.",
        "8. Reprendre le hash de production template",
        "Avant d'\u00eatre en mesure de pousser vos modifications dans l'environnement par d\u00e9faut (template dans notre exemple) de production, vous devez d\u00e9montrer que vous venez bien faire une modification sur la version \"courante\" des contenus.\r\n\r\n\r\nC'est donc la m\u00eame chose que ce qu'on a fait pour l'acceptation, il est imp\u00e9ratif de d'abord r\u00e9cup\u00e9rer la signature des contenus template de production avant.\r\n\r\nCela s'obtient avec la commande pull:\r\n\r\n```\r\ndocker-compose exec artists-prd template ems:local:pull\r\n```\r\n\r\nComme toujours avec le pull vous perdez vos modifications.\r\n\r\nComme vous \u00eates s\u00fbr de vos modifications vous pouvez faire un rollback de toutes les modifications \r\npar rapport au git sauf pour le fichier `skeleton/.version` qui contient justement le hash du contenu template de production.",
        "9. Pousser en production template",
        "Vous pouvez maintenant d\u00e9ployer vos modifications en production:\r\n\r\n```\r\ndocker-compose exec artists-prd template ems:local:push\r\n```",
        "10: Aligner le preview et le live de production",
        "Apr\u00e8s vos tests en template, vous pouvez aligner vos contenus route, template et translation en production depuis l'admin elasticms de production."
    ],
    "template": "blog",
    "title": "Comment utiliser les commandes \"locales\" du skeleton"
}