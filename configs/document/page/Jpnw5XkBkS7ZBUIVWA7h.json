{
    "blocks": "[{\"id\":\"ef32befa-f9fe-468b-baca-1ff199e9d3ac\",\"object\":{\"label\":\"Goal\",\"body\":\"Let's assume that we have a json array having a nested structure of objects. Typically something that you manage with a [JsonMenuEditorFieldType](https://github.com/ems-project/EMSCoreBundle/blob/master/src/Form/DataField/JsonMenuEditorFieldType.php) field in elasticms. Those object can be of any kind with their specifics fields.\\r\\n\\r\\nThe first goal is to recursively generate a HTML DOM out of this structure with a Twig template.\\r\\n\\r\\nAfter that, how can we apply a specific Twig template in function of the type of the object.\"},\"label\":\"Goal\",\"type\":\"doc\"},{\"id\":\"894d9396-6f92-4e6d-b44a-01db54bf3849\",\"object\":{\"label\":\"Think object\",\"body\":\"You have to consider a Twig template as an object in an object-oriented way. Indeed `blocks`can be seen as class's functions and with the `extends` you can inherit from another. In this approach the Twig context is you class's members. In this post I'll define one Twig's class by type of object in my JSON structure. All those classes inherits from an 'abstract' `block.html.twig` Twig template. That abstract class will implement those functions:\\r\\n\\r\\n - render: generates the DOM from a structure\\r\\n - row: generates the DOM for the current object\\r\\n - title: generates the object title's DOM\\r\\n - widget: generates the object content's DOM\\r\\n - children: generates the object children's DOM\\r\\n\\r\\nTo call a specific Twig template's block with a specific Twig context we need to combine `with` and `block`.\\r\\n\\r\\n```twig\\r\\n    {% with {\\r\\n        'structure': source.blocks|default(\\\"{}\\\")|ems_json_decode,\\r\\n        'trans_default_domain': trans_default_domain,\\r\\n    } %}\\r\\n        {{ block(\\\"children\\\", \\\"@EMSCH/template/blocks/abstract-block.html.twig\\\") }}\\r\\n    {% endwith %}\\r\\n```\\r\\n\\r\\nLike that, Twig's blocks can be recursively called in a more elegant way that using macros.\\r\\n\\r\\nNotice that that I also provide the trans_default_domain variable.\"},\"label\":\"Think object\",\"type\":\"doc\"},{\"id\":\"99249e95-43f5-4eb4-8514-57c85085ab88\",\"type\":\"doc\",\"object\":{\"label\":\"Recursively generate DOM\",\"body\":\"This block receives the array of objects and have to initialize the recursive rendering for each of them. With the right Twig context:\\r\\n - item: the object\\r\\n - childrenHaveBeenGenerated: a variable set to true if the children block has been called\\r\\n - currentBlockLevel: a variable with the object level in the structure (from 0)\\r\\n - headerBlockLevel: the header tag (H2, H3, ...) to generate if a label is defined in the current object (starting at 2) \\r\\n\\r\\n\\r\\n```twig\\r\\n{% block render %}\\r\\n    {% spaceless %}\\r\\n        {% set childrenHaveBeenGenerated = false %}\\r\\n        {% set currentBlockLevel = 1 %}\\r\\n        {% set headerBlockLevel = 2 %}\\r\\n        {% for item in structure|default([]) %}\\r\\n            {% with {\\r\\n                'item': item,\\r\\n                'currentBlockLevel': currentBlockLevel,\\r\\n                'headerBlockLevel': headerBlockLevel,\\r\\n                'headerBlockLevel': headerBlockLevel,\\r\\n                'trans_default_domain': trans_default_domain,\\r\\n            } %}\\r\\n                {{ block(\\\"row\\\") }}\\r\\n            {% endwith %}\\r\\n        {%  endfor %}\\r\\n    {% endspaceless %}\\r\\n{% endblock render %}\\r\\n```\\r\\n\\r\\nThe `trans_default_domain` variable is still passed to the block sub-templates.\\r\\n\\r\\nThe row block will be called for each object:\\r\\n\\r\\n```twig\\r\\n{% block row %}\\r\\n    {% spaceless %}\\r\\n        <div class=\\\"{{ item.object.class|default('pt-4 px-3 px-lg-4') }}\\\" id=\\\"row-{{ item.id }}\\\">\\r\\n            {{ block('title') }}\\r\\n            {{ block('widget') }}\\r\\n            {%  if item.children|default([])|length > 0 %}\\r\\n                {{ block('children') }}\\r\\n            {% endif %}\\r\\n        </div>\\r\\n    {% endspaceless %}\\r\\n{% endblock row %}\\r\\n```\\r\\n\\r\\nThe `title` block is generating a header tag if a label is defined:\\r\\n\\r\\n```twig\\r\\n{% block title %}\\r\\n    {% spaceless %}\\r\\n        {% if item.object.label is defined %}\\r\\n            <h{{ headerBlockLevel }} class=\\\"h{{ headerBlockLevel+1 }} mb-4 mt-2\\\">{{ item.object.label|default('') }}</h{{ headerBlockLevel }}>\\r\\n        {% endif %}\\r\\n    {% endspaceless %}\\r\\n{% endblock title %}\\r\\n```\\r\\n\\r\\nThe `widget` is the abstract method (it has to be overridden):\\r\\n\\r\\n```twig\\r\\n{% block widget %}\\r\\n    <p>{{ ('Block `widget` must be overridden for. `' ~ item.type ~ '`')|ems_markdown }}</p>\\r\\n{% endblock widget %}\\r\\n```\\r\\n\\r\\nAnd finally the `children` block wich initiate the context for all object's children:\\r\\n\\r\\n```twig\\r\\n{% block children %}\\r\\n    {% spaceless %}\\r\\n        {% if not childrenHaveBeenGenerated %}\\r\\n            {% set currentBlockLevel = currentBlockLevel + 1 %}\\r\\n            {% set headerBlockLevel = headerBlockLevel + (item.object.label is defined ? 1 : 0) %}\\r\\n            {% for item in item.children|default([]) %}\\r\\n                {{ block(\\\"row\\\") }}\\r\\n            {% endfor %}\\r\\n            {% set childrenHaveBeenGenerated = true %}\\r\\n        {% endif %}\\r\\n    {% endspaceless %}\\r\\n{% endblock %}\\r\\n```\\r\\n\\r\\nThe variable `childrenHaveBeenGenerated` is used in order to avoid that the children are generated twice.\"},\"label\":\"Recursively generate DOM\"},{\"id\":\"5ea11436-92c5-4721-acf8-1b97b581b42c\",\"type\":\"doc\",\"object\":{\"label\":\"Customize by type\",\"body\":\"Let's update the `children` block in order to call a template based on the object's type:\\r\\n\\r\\n```twig\\r\\n{% block children %}\\r\\n    {% spaceless %}\\r\\n        {% if not childrenHaveBeenGenerated %}\\r\\n            {% set currentBlockLevel = currentBlockLevel + 1 %}\\r\\n            {% set headerBlockLevel = headerBlockLevel + (item.object.label is defined ? 1 : 0) %}\\r\\n            {% for item in item.children|default([]) %}\\r\\n                {{ block(\\\"row\\\", \\\"@EMSCH/template/blocks/\\\"~item.type~\\\".html.twig\\\") }}\\r\\n            {% endfor %}\\r\\n            {% set childrenHaveBeenGenerated = true %}\\r\\n        {% endif %}\\r\\n    {% endspaceless %}\\r\\n{% endblock %}\\r\\n```\\r\\n\\r\\nAnd the render and the row block:\\r\\n\\r\\n```twig\\r\\n{% block render %}\\r\\n    {% spaceless %}\\r\\n        {% set childrenHaveBeenGenerated = false %}\\r\\n        {% set currentBlockLevel = 1 %}\\r\\n        {% set headerBlockLevel = 2 %}\\r\\n        {% for item in structure|default([]) %}\\r\\n            {% with {\\r\\n                'item': item,\\r\\n                'currentBlockLevel': currentBlockLevel,\\r\\n                'headerBlockLevel': headerBlockLevel,\\r\\n                'headerBlockLevel': headerBlockLevel,\\r\\n                'trans_default_domain': trans_default_domain,\\r\\n            } %}\\r\\n                {{ block(\\\"row\\\", \\\"@EMSCH/template/blocks/\\\"~item.type~\\\".html.twig\\\") }}\\r\\n            {% endwith %}\\r\\n        {%  endfor %}\\r\\n    {% endspaceless %}\\r\\n{% endblock render %}\\r\\n```\\r\\n\\r\\n```twig\\r\\n{% block row %}\\r\\n    {% spaceless %}\\r\\n        <div class=\\\"{{ item.object.class|default('pt-4 px-3 px-lg-4') }}\\\" id=\\\"row-{{ item.id }}\\\">\\r\\n            {{ block('title', \\\"@EMSCH/template/blocks/\\\"~item.type~\\\".html.twig\\\") }}\\r\\n            {{ block('widget', \\\"@EMSCH/template/blocks/\\\"~item.type~\\\".html.twig\\\") }}\\r\\n            {%  if item.children|default([])|length > 0 %}\\r\\n                {{ block('children', \\\"@EMSCH/template/blocks/\\\"~item.type~\\\".html.twig\\\") }}\\r\\n            {% endif %}\\r\\n        </div>\\r\\n    {% endspaceless %}\\r\\n{% endblock row %}\\r\\n```\\r\\n\\r\\n\\r\\nIf our object `item` has a markdown field, it's Twig may looks like this:\\r\\n\\r\\n```twig\\r\\n{% extends '@EMSCH/template/blocks/abstract-block.html.twig' %}\\r\\n\\r\\n{% block widget %}\\r\\n    {{ item.object.body|default('')|ems_markdown|emsch_routing }}\\r\\n{% endblock %}\\r\\n```\\r\\n\\r\\nSo you can also call the parent function:\\r\\n\\r\\n```twig\\r\\n{% block row %}\\r\\n    {% spaceless %}\\r\\n        {% if item.object.hr|default(false) %}\\r\\n            <hr class=\\\"d-print-none\\\">\\r\\n        {% endif %}\\r\\n        {{ parent() }}\\r\\n    {% endspaceless %}\\r\\n{% endblock row %}\\r\\n\\r\\n{% block widget %}{% endblock widget %}\\r\\n```\"},\"label\":\"Customize by type\"},{\"id\":\"1f7d6bda-5b7a-4c7e-bed7-0ec4388a5f49\",\"type\":\"doc\",\"object\":{\"label\":\"Reuse a block\",\"body\":\"Hopefully you can reuse a block outside a structure context:\\r\\n\\r\\n```twig\\r\\n{% with {\\r\\n    'item': {\\r\\n        id: 'blog-template',\\r\\n        type: 'last_updates',\\r\\n        object: {\\r\\n            title: 'blog.last_update',\\r\\n            limit: 10,\\r\\n        }\\r\\n    }\\r\\n} %}\\r\\n    {{ block(\\\"row\\\", \\\"@EMSCH/template/blocks/last_updates.html.twig\\\") }}\\r\\n{% endwith %}\\r\\n```\"},\"label\":\"Reuse a block\"},{\"id\":\"075fa513-03a1-439e-bef0-51d044e550f6\",\"object\":{\"label\":\"Define a translation domain\",\"body\":\"If you want to use a skeleton translation inside your blocks you have to specify, inside your blocks, the skeleton translation domain (which is in fact your environment alias name):\\r\\n\\r\\n```\\r\\n{% extends '@EMSCH/template/blocks/abstract-block.html.twig' %}\\r\\n{% trans_default_domain trans_default_domain %}\\r\\n\\r\\n{% block widget %}\\r\\n    {% set result = emsch_search('page', {\\r\\n        \\\"query\\\": {\\r\\n            \\\"term\\\": {\\r\\n                \\\"template\\\": \\\"blog\\\"\\r\\n            }\\r\\n        },\\r\\n        \\\"sort\\\": {\\r\\n            \\\"published_date\\\": {\\r\\n                \\\"order\\\": \\\"desc\\\",\\r\\n                \\\"missing\\\": \\\"_last\\\",\\r\\n                \\\"unmapped_type\\\": \\\"long\\\"\\r\\n            }\\r\\n        }\\r\\n    }, 0 , item.object.limit|default(10)) %}\\r\\n\\r\\n    <ul>\\r\\n        {% for item in result.hits.hits %}\\r\\n            <li><a lang=\\\"{{ item._source.locale }}\\\" href=\\\"{{ path('match_all', {\\r\\n                    path:item._source.path,\\r\\n                    _locale:item._source.locale,\\r\\n                }) }}\\\">{{ item._source.title }}</a>\\r\\n            {% if app.request.locale != item._source.locale %}\\r\\n                &nbsp;[{{ ('website.content_in.'~item._source.locale)|trans }}]\\r\\n            {% endif %}\\r\\n            </li>\\r\\n        {% endfor %}\\r\\n    </ul>\\r\\n{% endblock %}\\r\\n```\\r\\n\\r\\nAs those blocks are loaded outside of the request; the `trans_default_domain` variable is unknowed outside of the twig blocks. So some block template, like this one, will trigged an error:\\r\\n\\r\\n```\\r\\n{% extends '@EMSCH/template/blocks/abstract-block.html.twig' %}\\r\\n{% trans_default_domain trans_default_domain %}\\r\\n\\r\\n{% block widget %}\\r\\n    {{ 'foobar'| trans }}\\r\\n{% endblock %}\\r\\n```\\r\\n```\"},\"type\":\"doc\",\"label\":\"Define a translation domain\"}]",
    "description": "See Twig template as class in a object-oriented approach",
    "label": "2021-06-06 Twig in an object-oriented approach",
    "locale": "en",
    "path": "blog/2021-06-06/twig-in-an-object-oriented-approach",
    "published_date": "2021-06-06T18:06:21+02:00",
    "search": [
        "Goal",
        "Let's assume that we have a json array having a nested structure of objects. Typically something that you manage with a [JsonMenuEditorFieldType](https://github.com/ems-project/EMSCoreBundle/blob/master/src/Form/DataField/JsonMenuEditorFieldType.php) field in elasticms. Those object can be of any kind with their specifics fields.\r\n\r\nThe first goal is to recursively generate a HTML DOM out of this structure with a Twig template.\r\n\r\nAfter that, how can we apply a specific Twig template in function of the type of the object.",
        "Think object",
        "You have to consider a Twig template as an object in an object-oriented way. Indeed `blocks`can be seen as class's functions and with the `extends` you can inherit from another. In this approach the Twig context is you class's members. In this post I'll define one Twig's class by type of object in my JSON structure. All those classes inherits from an 'abstract' `block.html.twig` Twig template. That abstract class will implement those functions:\r\n\r\n - render: generates the DOM from a structure\r\n - row: generates the DOM for the current object\r\n - title: generates the object title's DOM\r\n - widget: generates the object content's DOM\r\n - children: generates the object children's DOM\r\n\r\nTo call a specific Twig template's block with a specific Twig context we need to combine `with` and `block`.\r\n\r\n```twig\r\n    {% with {\r\n        'structure': source.blocks|default(\"{}\")|ems_json_decode,\r\n        'trans_default_domain': trans_default_domain,\r\n    } %}\r\n        {{ block(\"children\", \"@EMSCH/template/blocks/abstract-block.html.twig\") }}\r\n    {% endwith %}\r\n```\r\n\r\nLike that, Twig's blocks can be recursively called in a more elegant way that using macros.\r\n\r\nNotice that that I also provide the trans_default_domain variable.",
        "Recursively generate DOM",
        "This block receives the array of objects and have to initialize the recursive rendering for each of them. With the right Twig context:\r\n - item: the object\r\n - childrenHaveBeenGenerated: a variable set to true if the children block has been called\r\n - currentBlockLevel: a variable with the object level in the structure (from 0)\r\n - headerBlockLevel: the header tag (H2, H3, ...) to generate if a label is defined in the current object (starting at 2) \r\n\r\n\r\n```twig\r\n{% block render %}\r\n    {% spaceless %}\r\n        {% set childrenHaveBeenGenerated = false %}\r\n        {% set currentBlockLevel = 1 %}\r\n        {% set headerBlockLevel = 2 %}\r\n        {% for item in structure|default([]) %}\r\n            {% with {\r\n                'item': item,\r\n                'currentBlockLevel': currentBlockLevel,\r\n                'headerBlockLevel': headerBlockLevel,\r\n                'headerBlockLevel': headerBlockLevel,\r\n                'trans_default_domain': trans_default_domain,\r\n            } %}\r\n                {{ block(\"row\") }}\r\n            {% endwith %}\r\n        {%  endfor %}\r\n    {% endspaceless %}\r\n{% endblock render %}\r\n```\r\n\r\nThe `trans_default_domain` variable is still passed to the block sub-templates.\r\n\r\nThe row block will be called for each object:\r\n\r\n```twig\r\n{% block row %}\r\n    {% spaceless %}\r\n        \r\n            {{ block('title') }}\r\n            {{ block('widget') }}\r\n            {%  if item.children|default([])|length > 0 %}\r\n                {{ block('children') }}\r\n            {% endif %}\r\n        \r\n    {% endspaceless %}\r\n{% endblock row %}\r\n```\r\n\r\nThe `title` block is generating a header tag if a label is defined:\r\n\r\n```twig\r\n{% block title %}\r\n    {% spaceless %}\r\n        {% if item.object.label is defined %}\r\n            {{ item.object.label|default('') }}\r\n        {% endif %}\r\n    {% endspaceless %}\r\n{% endblock title %}\r\n```\r\n\r\nThe `widget` is the abstract method (it has to be overridden):\r\n\r\n```twig\r\n{% block widget %}\r\n    {{ ('Block `widget` must be overridden for. `' ~ item.type ~ '`')|ems_markdown }}\r\n{% endblock widget %}\r\n```\r\n\r\nAnd finally the `children` block wich initiate the context for all object's children:\r\n\r\n```twig\r\n{% block children %}\r\n    {% spaceless %}\r\n        {% if not childrenHaveBeenGenerated %}\r\n            {% set currentBlockLevel = currentBlockLevel + 1 %}\r\n            {% set headerBlockLevel = headerBlockLevel + (item.object.label is defined ? 1 : 0) %}\r\n            {% for item in item.children|default([]) %}\r\n                {{ block(\"row\") }}\r\n            {% endfor %}\r\n            {% set childrenHaveBeenGenerated = true %}\r\n        {% endif %}\r\n    {% endspaceless %}\r\n{% endblock %}\r\n```\r\n\r\nThe variable `childrenHaveBeenGenerated` is used in order to avoid that the children are generated twice.",
        "Customize by type",
        "Let's update the `children` block in order to call a template based on the object's type:\r\n\r\n```twig\r\n{% block children %}\r\n    {% spaceless %}\r\n        {% if not childrenHaveBeenGenerated %}\r\n            {% set currentBlockLevel = currentBlockLevel + 1 %}\r\n            {% set headerBlockLevel = headerBlockLevel + (item.object.label is defined ? 1 : 0) %}\r\n            {% for item in item.children|default([]) %}\r\n                {{ block(\"row\", \"@EMSCH/template/blocks/\"~item.type~\".html.twig\") }}\r\n            {% endfor %}\r\n            {% set childrenHaveBeenGenerated = true %}\r\n        {% endif %}\r\n    {% endspaceless %}\r\n{% endblock %}\r\n```\r\n\r\nAnd the render and the row block:\r\n\r\n```twig\r\n{% block render %}\r\n    {% spaceless %}\r\n        {% set childrenHaveBeenGenerated = false %}\r\n        {% set currentBlockLevel = 1 %}\r\n        {% set headerBlockLevel = 2 %}\r\n        {% for item in structure|default([]) %}\r\n            {% with {\r\n                'item': item,\r\n                'currentBlockLevel': currentBlockLevel,\r\n                'headerBlockLevel': headerBlockLevel,\r\n                'headerBlockLevel': headerBlockLevel,\r\n                'trans_default_domain': trans_default_domain,\r\n            } %}\r\n                {{ block(\"row\", \"@EMSCH/template/blocks/\"~item.type~\".html.twig\") }}\r\n            {% endwith %}\r\n        {%  endfor %}\r\n    {% endspaceless %}\r\n{% endblock render %}\r\n```\r\n\r\n```twig\r\n{% block row %}\r\n    {% spaceless %}\r\n        \r\n            {{ block('title', \"@EMSCH/template/blocks/\"~item.type~\".html.twig\") }}\r\n            {{ block('widget', \"@EMSCH/template/blocks/\"~item.type~\".html.twig\") }}\r\n            {%  if item.children|default([])|length > 0 %}\r\n                {{ block('children', \"@EMSCH/template/blocks/\"~item.type~\".html.twig\") }}\r\n            {% endif %}\r\n        \r\n    {% endspaceless %}\r\n{% endblock row %}\r\n```\r\n\r\n\r\nIf our object `item` has a markdown field, it's Twig may looks like this:\r\n\r\n```twig\r\n{% extends '@EMSCH/template/blocks/abstract-block.html.twig' %}\r\n\r\n{% block widget %}\r\n    {{ item.object.body|default('')|ems_markdown|emsch_routing }}\r\n{% endblock %}\r\n```\r\n\r\nSo you can also call the parent function:\r\n\r\n```twig\r\n{% block row %}\r\n    {% spaceless %}\r\n        {% if item.object.hr|default(false) %}\r\n            \r\n        {% endif %}\r\n        {{ parent() }}\r\n    {% endspaceless %}\r\n{% endblock row %}\r\n\r\n{% block widget %}{% endblock widget %}\r\n```",
        "Reuse a block",
        "Hopefully you can reuse a block outside a structure context:\r\n\r\n```twig\r\n{% with {\r\n    'item': {\r\n        id: 'blog-template',\r\n        type: 'last_updates',\r\n        object: {\r\n            title: 'blog.last_update',\r\n            limit: 10,\r\n        }\r\n    }\r\n} %}\r\n    {{ block(\"row\", \"@EMSCH/template/blocks/last_updates.html.twig\") }}\r\n{% endwith %}\r\n```",
        "Define a translation domain",
        "If you want to use a skeleton translation inside your blocks you have to specify, inside your blocks, the skeleton translation domain (which is in fact your environment alias name):\r\n\r\n```\r\n{% extends '@EMSCH/template/blocks/abstract-block.html.twig' %}\r\n{% trans_default_domain trans_default_domain %}\r\n\r\n{% block widget %}\r\n    {% set result = emsch_search('page', {\r\n        \"query\": {\r\n            \"term\": {\r\n                \"template\": \"blog\"\r\n            }\r\n        },\r\n        \"sort\": {\r\n            \"published_date\": {\r\n                \"order\": \"desc\",\r\n                \"missing\": \"_last\",\r\n                \"unmapped_type\": \"long\"\r\n            }\r\n        }\r\n    }, 0 , item.object.limit|default(10)) %}\r\n\r\n    \r\n        {% for item in result.hits.hits %}\r\n            {{ item._source.title }}\r\n            {% if app.request.locale != item._source.locale %}\r\n                &nbsp;[{{ ('website.content_in.'~item._source.locale)|trans }}]\r\n            {% endif %}\r\n            \r\n        {% endfor %}\r\n    \r\n{% endblock %}\r\n```\r\n\r\nAs those blocks are loaded outside of the request; the `trans_default_domain` variable is unknowed outside of the twig blocks. So some block template, like this one, will trigged an error:\r\n\r\n```\r\n{% extends '@EMSCH/template/blocks/abstract-block.html.twig' %}\r\n{% trans_default_domain trans_default_domain %}\r\n\r\n{% block widget %}\r\n    {{ 'foobar'| trans }}\r\n{% endblock %}\r\n```\r\n```"
    ],
    "template": "blog",
    "title": "Twig in an object-oriented approach"
}